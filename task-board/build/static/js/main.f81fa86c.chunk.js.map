{"version":3,"sources":["components/Navigation.js","components/FrmAddTask.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","href","this","props","title","ntasks","Component","FrmAddTask","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","responsible","description","priority","handleInputChange","bind","assertThisInitialized","handleSubmit","receivedbtn","preventDefault","onAddTask","setState","receivedinput","_receivedinput$target","target","value","name","defineProperty","onSubmit","type","onChange","placeholder","App","tasks","handleAddTasks","concat","toConsumableArray","task","window","confirm","filter","e","i","_this2","map","key","changeBadgeColor","onClick","removeTask","components_Navigation","length","components_FrmAddTask","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f81fa86c.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\n\r\nclass Navigation extends Component{\r\nrender(){\r\n    return(\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a href=\"/#\" className=\"text-white\">{ this.props.title } <span className=\"badge badge-pill badge-light ml-2\">{this.props.ntasks}</span></a>\r\n        \r\n        </nav>\r\n    )\r\n\r\n}\r\n}\r\n\r\nexport default Navigation;","import React, {Component} from 'react';\r\n\r\nclass FrmAddTask extends Component {\r\n    constructor () {\r\n      super();\r\n      this.state = {\r\n        title: '',\r\n        responsible: '',\r\n        description: '',\r\n        priority: 'low'\r\n      };\r\n      this.handleInputChange = this.handleInputChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleSubmit(receivedbtn) {\r\n      receivedbtn.preventDefault();\r\n      this.props.onAddTask(this.state);\r\n      this.setState({\r\n        title: '',\r\n        responsible: '',\r\n        description: '',\r\n        priority: 'low'\r\n      });\r\n    }\r\n  \r\n    handleInputChange(receivedinput) {\r\n      const {value, name} = receivedinput.target;\r\n      this.setState({\r\n        [name]: value\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"card\">\r\n          <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                className=\"form-control\"\r\n                value={this.state.title}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Title\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"responsible\"\r\n                className=\"form-control\"\r\n                value={this.state.responsible}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Responsible\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"description\"\r\n                className=\"form-control\"\r\n                value={this.state.description}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Description\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <select\r\n                  name=\"priority\"\r\n                  className=\"form-control\"\r\n                  value={this.state.priority}\r\n                  onChange={this.handleInputChange}\r\n                >\r\n                <option>low</option>\r\n                <option>medium</option>\r\n                <option>high</option>\r\n              </select>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Save\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  \r\n  }\r\n  \r\n  export default FrmAddTask;","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport { tasks } from './tasks.json';\nimport FrmAddTask from './components/FrmAddTask';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      tasks\n    };\n    this.handleAddTasks= this.handleAddTasks.bind(this);\n  }\n  \n  handleAddTasks(tasks){\n    this.setState({\n      tasks: [...this.state.tasks,tasks]\n    });\n  };\n\n  removeTask(task){\n    if(window.confirm('Are you sure you want to delete the task?')){\n      this.setState({\n        tasks:this.state.tasks.filter((e,i)=>{\n        return i !== task;\n        })\n      })\n    }\n  }\n\n  changeBadgeColor(priority){\n    switch(priority){\n      case \"low\":\n      return \"badge badge-pill badge-primary\";\n\n      case \"medium\":\n      return \"badge badge-pill badge-info\";\n\n      case \"high\":\n      return \"badge badge-pill badge-success\";\n\n      default:\n      return \"badge badge-pill badge-info\";\n    }\n  }\n\n  render() {\n    const tasks= this.state.tasks.map((tasks,i) =>{\n      return(\n        <div className=\"col-6 col-lg-4\" key={i}>\n        <div className=\"card mt-4\">\n        <div className=\"card-header\"><h3>{tasks.title}</h3>\n        <span className={this.changeBadgeColor(tasks.priority)}>{tasks.priority}</span></div>\n        <div className=\"card-body\"><p>{tasks.description}</p><p><mark>{tasks.responsible}</mark></p></div>\n        <div className=\"card-footer\"><button type=\"submit\" className=\"btn btn-danger\" onClick={this.removeTask.bind(this,i)}>Delete</button></div>\n        </div>\n        </div>\n      )\n    });\n\n    return (\n      <div className=\"App\">\n          <Navigation title=\"Task Board\" ntasks={this.state.tasks.length}/>\n          <div className=\"container-fluid\">\n          <div className=\"row\">\n          <div className=\"col-12 col-lg-2 mt-5\"><FrmAddTask onAddTask={this.handleAddTasks}/></div>\n          <div className=\"col-12 col-lg-10 mb-4\">\n          <div className=\"row mt-4\">\n          {tasks} \n          </div>\n          </div>\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}